{"name": "TC_002: Negative cart value", "status": "failed", "statusDetails": {"message": "AssertionError: assert 200 in (400, 422)\n +  where 200 = <Response [200]>.status_code", "trace": "cart_offer = <library.services.cart_offer_services.CartOfferServices object at 0x76d74eb93980>\nmockserver = <library.mockserver.MockServer object at 0x76d74e9dc410>, title = 'TC_002: Negative cart value', cart_value = -100\nuser_id = 1, restaurant_id = 1, segment = None, offer_type = None, offer_value = None, allowed_segments = None\nexpected_cart_value = None, expected_status = 400, xfail_reason = None\n\n    @allure.feature(\"Cart Offer - Business Rule Validation\")\n    @pytest.mark.validation\n    @pytest.mark.parametrize(\n        \"title, cart_value, user_id, restaurant_id, segment, offer_type, offer_value, allowed_segments, expected_cart_value, expected_status, xfail_reason\",\n        [\n            (\"TC_001: Invalid data type for cart_value\", \"abc\", 1, 1, None, None, None, None, None, 400, None),\n            (\"TC_002: Negative cart value\", -100, 1, 1, None, None, None, None, None, 400, None),\n            (\"TC_003: Ineligible user segment\", 200, 1, 1, \"unknown\", \"FLATX\", 10, [\"p1\"], 200, 200, \"Segment mismatch â€” no offer applied\"),\n        ]\n    )\n    def test_cart_offer_business_rules(\n        cart_offer: CartOfferServices,\n        mockserver: MockServer,\n        title: str,\n        cart_value,\n        user_id,\n        restaurant_id,\n        segment,\n        offer_type,\n        offer_value,\n        allowed_segments,\n        expected_cart_value,\n        expected_status,\n        xfail_reason: str,\n    ):\n        allure.dynamic.title(title)\n    \n        if xfail_reason:\n            pytest.xfail(reason=xfail_reason)\n    \n        if segment:\n            mockserver.set_user_segment_mock(user_id=user_id, segment=segment)\n    \n        if offer_type and allowed_segments:\n            cart_offer.create_offer(\n                restaurant_id=restaurant_id,\n                offer_type=offer_type,\n                offer_value=offer_value,\n                customer_segment=allowed_segments,\n            )\n    \n        response = cart_offer.apply_offer(\n            cart_value=cart_value,\n            user_id=user_id,\n            restaurant_id=restaurant_id,\n        )\n    \n>       assert response.status_code in (expected_status, 422)\nE       assert 200 in (400, 422)\nE        +  where 200 = <Response [200]>.status_code\n\ntests/test_business_logic_validation.py:54: AssertionError"}, "attachments": [{"name": "log", "source": "4de148c1-273d-498b-a42e-c2fb6788531e-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "title", "value": "'TC_002: Negative cart value'"}, {"name": "cart_value", "value": "-100"}, {"name": "user_id", "value": "1"}, {"name": "restaurant_id", "value": "1"}, {"name": "segment", "value": "None"}, {"name": "offer_type", "value": "None"}, {"name": "offer_value", "value": "None"}, {"name": "allowed_segments", "value": "None"}, {"name": "expected_cart_value", "value": "None"}, {"name": "expected_status", "value": "400"}, {"name": "xfail_reason", "value": "None"}], "start": 1752147997714, "stop": 1752147997744, "uuid": "c4f28bac-2316-4c49-aa35-c341a5bdc2c1", "historyId": "cb61e43f0daae0ae9ec7bc47b7f7f66f", "testCaseId": "efbfa2d171d522eab5441969d6379088", "fullName": "tests.test_business_logic_validation#test_cart_offer_business_rules", "labels": [{"name": "feature", "value": "Cart Offer - Business Rule Validation"}, {"name": "tag", "value": "validation"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_business_logic_validation"}, {"name": "host", "value": "LAPTOP-AEEGI4HU"}, {"name": "thread", "value": "143636-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_business_logic_validation"}]}